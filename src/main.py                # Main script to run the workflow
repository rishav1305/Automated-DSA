import os
import csv
from datetime import datetime
from scrapers.neetcode_scraper import fetch_questions
from utils.csv_handler import write_questions_to_csv, read_questions_from_csv
from utils.git_handler import commit_and_push
from utils.solution_tester import validate_solution
from templates.solution_template import solution_template

def main():
    # Step 1: Fetch questions from NeetCode
    questions = fetch_questions()
    
    # Step 2: Save questions to CSV
    csv_file_path = os.path.join('questions', 'questions.csv')
    write_questions_to_csv(csv_file_path, questions)
    
    # Step 3: Read questions from CSV
    questions_data = read_questions_from_csv(csv_file_path)
    
    # Step 4: Pick a new question (for simplicity, we pick the first one)
    question = questions_data[0]  # Replace with logic to pick a new question daily
    header = question['header']
    difficulty = question['difficulty']
    question_text = question['question']
    
    # Step 5: Create solution file path
    solution_dir = os.path.join('solutions', header, difficulty)
    os.makedirs(solution_dir, exist_ok=True)
    solution_file_path = os.path.join(solution_dir, f"{question_text.replace(' ', '_')}_solution.py")
    
    # Step 6: Write the solution template to the file
    with open(solution_file_path, 'w') as solution_file:
        solution_file.write(solution_template.format(question=question_text))
    
    # Step 7: Validate the solution
    if validate_solution(solution_file_path):
        print(f"Solution for '{question_text}' is valid.")
    else:
        print(f"Solution for '{question_text}' is invalid.")
    
    # Step 8: Commit and push changes to Git
    commit_and_push(f"Add solution for {question_text} on {datetime.now().strftime('%Y-%m-%d')}")

if __name__ == "__main__":
    main()